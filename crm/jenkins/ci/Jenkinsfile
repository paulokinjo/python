pipeline {

	agent any
  
	environment {
    WORK_DIR               = 'crm'
		DOCKERHUB_CREDENTIALS  = 'dockerhub-cred-paulo'
    IMAGE_NAME             = "paulokinjo/python-djcrm"
    GIT_COMMIT             = sh(returnStdout: true, script: 'git log --format="%H" -n 1')
    IMAGE_TAG              = sh(returnStdout: true, script: "echo ${env.BUILD_NUMBER}${GIT_COMMIT}")        
	}

	stages {        
		stage('Docker Build') {
			steps {        
        dir("${env.WORK_DIR}") {
          sh 'docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .'
          sh 'docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest'
        }
			}
		}

    stage('Docker Push') {
      steps {
        dir("${env.WORK_DIR}") {
          withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
            sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
            sh 'docker push ${IMAGE_NAME}:${IMAGE_TAG}'
            sh 'docker push ${IMAGE_NAME}:latest'
          }
        }
      }
    }

    stage('Unit Test') {            
      environment {
        TEST_COMMAND = "docker container run --rm -v ${env.WORKSPACE}/${env.WORK_DIR}:/usr/src/app paulokinjo/python-djcrm:latest python3 manage.py test"
      }
      steps {
        dir("${env.WORK_DIR}") {                            
          sh "${env.TEST_COMMAND}"          
        }
      }
    }
	}

	post {
		success {
      publishHTML (target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: "${env.WORK_DIR}/reports/cover",
        reportFiles: 'index.html',
        reportName: "DJCrm Test Coverage Report"
      ])
		}
	}

}